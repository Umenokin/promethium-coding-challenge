{"ast":null,"code":"var _jsxFileName = \"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/WeatherTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './WeatherTable.css';\nimport { createStyles, withStyles, Box, Container, Typography, Grid, Divider, Chip } from '@material-ui/core';\nimport WeatherTableRow from '../components/WeatherTableRow';\nimport WeatherTableHeader from '../components/WeatherTableHeader';\nimport ReloadButton from './ReloadButton';\nimport SelectionPanel from './SelectionPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherTable = props => {\n  _s();\n\n  const classes = props.classes;\n  const ids = [2172797, 1705545, 1796228, 1006984, 1796247];\n  const [listOfCityNames, setListOfCityNames] = useState([]);\n  const [listOfTemperatures, setListOfTemperatures] = useState([]);\n  const [listOfMinTemperatures, setListOfMinTemperatures] = useState([]);\n  const [listOfUpdatedAt, setListOfUpdatedAt] = useState([]);\n\n  const handleDelete = chip => {\n    listOfCityNames.map((city, index) => {\n      if (chip === city) {\n        setListOfCityNames(cityNames => cityNames.splice(index, 1));\n        setListOfTemperatures(cityNames => cityNames.splice(index, 1));\n        setListOfMinTemperatures(cityNames => cityNames.splice(index, 1));\n        setListOfUpdatedAt(cityNames => cityNames.splice(index, 1));\n      }\n    });\n  };\n\n  const fetchData = async () => {\n    ids.map(id => fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`).then(response => response.json()).then(data => {\n      var today = new Date();\n      var currTime = today.getHours() > 12 ? today.getHours() - 12 + ':' + today.getMinutes() + ':' + today.getSeconds() + 'PM' : today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds() + 'AM';\n      setListOfCityNames(cityNames => cityNames.concat(data.name));\n      setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n      setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n      setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n    }));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.weatherTableContainer,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(SelectionPanel, {\n        children: listOfCityNames.map(city => /*#__PURE__*/_jsxDEV(Chip, {\n          className: classes.selectionChip,\n          label: city,\n          onDelete: handleDelete(city)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WeatherTableHeader, {\n        cityName: \"City Name\",\n        temperature: \"Temperature\",\n        minTemperature: \"Min Temperature\",\n        updatedAt: \"Updated At\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), listOfCityNames.map((city, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(WeatherTableRow, {\n          cityName: city,\n          temperature: listOfTemperatures[index],\n          minTemperature: listOfMinTemperatures[index],\n          updatedAt: listOfUpdatedAt[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(ReloadButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherTable, \"zBWRcaXEgMv9W4F/ue4g02t02o0=\");\n\n_c = WeatherTable;\n\nconst useStyles = theme => createStyles({\n  weatherTableContainer: {\n    backgroundColor: theme.palette.background.main,\n    backgroundSize: 'cover',\n    width: '100%',\n    height: '100%',\n    margin: '0px',\n    padding: '0px',\n    overflowX: 'hidden'\n  },\n  selectionChip: {\n    margin: '.5rem',\n    fontFamily: theme.palette.typography.fontFamily,\n    color: theme.palette.text.primary,\n    backgroundColor: theme.palette.secondary.main\n  }\n});\n\nexport default withStyles(useStyles)(WeatherTable);\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherTable\");","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/WeatherTable.js"],"names":["React","useEffect","useState","createStyles","withStyles","Box","Container","Typography","Grid","Divider","Chip","WeatherTableRow","WeatherTableHeader","ReloadButton","SelectionPanel","WeatherTable","props","classes","ids","listOfCityNames","setListOfCityNames","listOfTemperatures","setListOfTemperatures","listOfMinTemperatures","setListOfMinTemperatures","listOfUpdatedAt","setListOfUpdatedAt","handleDelete","chip","map","city","index","cityNames","splice","fetchData","id","fetch","process","env","REACT_APP_WEATHER_API_KEY","then","response","json","data","today","Date","currTime","getHours","getMinutes","getSeconds","concat","name","temperatures","main","temp","minTemperatures","temp_min","updatedAt","weatherTableContainer","selectionChip","useStyles","theme","backgroundColor","palette","background","backgroundSize","width","height","margin","padding","overflowX","fontFamily","typography","color","text","primary","secondary"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './WeatherTable.css'\nimport { \n    createStyles, \n    withStyles,\n    Box,\n    Container,\n    Typography,\n    Grid,\n    Divider,\n    Chip\n} from '@material-ui/core';\nimport WeatherTableRow from '../components/WeatherTableRow';\nimport WeatherTableHeader from '../components/WeatherTableHeader';\nimport ReloadButton from './ReloadButton';\nimport SelectionPanel from './SelectionPanel';\n\nconst WeatherTable = (props) => {\n    const classes = props.classes;\n    const ids = [\n        2172797,\n        1705545,\n        1796228,\n        1006984,\n        1796247\n    ]\n    const [listOfCityNames, setListOfCityNames] = useState([]);\n    const [listOfTemperatures, setListOfTemperatures] = useState([]);\n    const [listOfMinTemperatures, setListOfMinTemperatures] = useState([]);\n    const [listOfUpdatedAt, setListOfUpdatedAt] = useState([]);\n\n    const handleDelete = (chip) => {\n        listOfCityNames.map((city, index) => {\n            if (chip === city) {\n                setListOfCityNames(cityNames => cityNames.splice(index, 1));\n                setListOfTemperatures(cityNames => cityNames.splice(index, 1));\n                setListOfMinTemperatures(cityNames => cityNames.splice(index, 1));\n                setListOfUpdatedAt(cityNames => cityNames.splice(index, 1));\n            }\n        })\n    }\n    const fetchData = async () => {\n        ids.map((id) => \n            fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n            .then((response) => response.json())\n            .then((data) => {\n                var today = new Date();\n                var currTime = ( today.getHours() > 12 ? (today.getHours()-12) + ':' + today.getMinutes() + ':' + today.getSeconds() + 'PM' : today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds() + 'AM');\n                setListOfCityNames(cityNames => cityNames.concat(data.name));\n                setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n                setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n                setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n            })\n        )\n    }\n    useEffect(() => {\n        fetchData();\n    }, []);\n    return (\n        <Box className={classes.weatherTableContainer}>\n            <Container>\n                <SelectionPanel>\n                {listOfCityNames.map((city) =>\n                    <Chip\n                    className={classes.selectionChip}\n                    label={city}\n                    onDelete={handleDelete(city)}\n                    />\n                )}\n                </SelectionPanel>\n                <WeatherTableHeader\n                   cityName = \"City Name\"\n                   temperature = \"Temperature\"\n                   minTemperature = \"Min Temperature\"\n                   updatedAt =  \"Updated At\"\n                />\n                {listOfCityNames.map((city, index) =>\n                    <div>\n                    <WeatherTableRow\n                    cityName = {city}\n                    temperature = {listOfTemperatures[index]}\n                    minTemperature = {listOfMinTemperatures[index]}\n                    updatedAt = {listOfUpdatedAt[index]}\n                    />\n                    <Divider/>\n                </div>\n                )}\n                <ReloadButton/>\n            </Container>\n        </Box>\n    );\n}\n\nconst useStyles = (theme) => createStyles({\n    weatherTableContainer: {\n        backgroundColor: theme.palette.background.main,\n        backgroundSize: 'cover',\n        width: '100%',\n        height: '100%',\n        margin: '0px',\n        padding: '0px',\n        overflowX: 'hidden',\n    },\n    selectionChip: {\n        margin: '.5rem',\n        fontFamily: theme.palette.typography.fontFamily,\n        color: theme.palette.text.primary,\n        backgroundColor: theme.palette.secondary.main,\n    }\n});\n\nexport default withStyles(useStyles)(WeatherTable);"]},"metadata":{},"sourceType":"module"}