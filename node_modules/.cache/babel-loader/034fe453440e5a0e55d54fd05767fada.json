{"ast":null,"code":"var _jsxFileName = \"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/WeatherTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './WeatherTable.css';\nimport { createStyles, withStyles, Box, Container, Divider, Chip } from '@material-ui/core';\nimport WeatherTableRow from '../components/WeatherTableRow';\nimport WeatherTableHeader from '../components/WeatherTableHeader';\nimport ReloadButton from './ReloadButton';\nimport SelectionPanel from './SelectionPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherTable = props => {\n  _s();\n\n  const classes = props.classes;\n  const ids = [2172797, 1705545, 1796228, 1006984, 1796247];\n  const [listOfIds, setListOfIds] = useState([]);\n  const [listOfCityNames, setListOfCityNames] = useState([]);\n  const [listOfTemperatures, setListOfTemperatures] = useState([]);\n  const [listOfMinTemperatures, setListOfMinTemperatures] = useState([]);\n  const [listOfUpdatedAt, setListOfUpdatedAt] = useState([]);\n\n  const handleSingleReload = index => {\n    setListOfCityNames(cityNames => cityNames.filter(city => cityNames.indexOf(city) !== index));\n    setListOfTemperatures(temperatures => temperatures.filter(temperature => temperatures.indexOf(temperature) !== index));\n    setListOfMinTemperatures(minTemperatures => minTemperatures.filter(minTemperature => minTemperatures.indexOf(minTemperature) !== index));\n    setListOfUpdatedAt(updatedAt => updatedAt.filter(date => updatedAt.indexOf(date) !== index));\n    fetch(`https://api.openweathermap.org/data/2.5/weather?id=${listOfIds[index]}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`).then(response => response.json()).then(data => {\n      var date = new Date();\n      var hours = date.getHours();\n      var minutes = date.getMinutes();\n      var seconds = date.getSeconds();\n      var milliseconds = date.getMilliseconds();\n      var ampm = hours >= 12 ? 'pm' : 'am';\n      hours = hours % 12;\n      hours = hours ? hours : 12; // the hour '0' should be '12'\n\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n      seconds = seconds < 10 ? '0' + seconds : seconds;\n      milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds;\n      var currTime = hours + ':' + minutes + ':' + seconds + ':' + milliseconds + ' ' + ampm;\n      setListOfCityNames(cityNames => cityNames.concat(data.name));\n      setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n      setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n      setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n    });\n  };\n\n  const handleReload = () => {\n    setListOfCityNames([]);\n    setListOfTemperatures([]);\n    setListOfMinTemperatures([]);\n    setListOfUpdatedAt([]);\n    listOfIds.map(id => fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`).then(response => response.json()).then(data => {\n      var date = new Date();\n      var hours = date.getHours();\n      var minutes = date.getMinutes();\n      var seconds = date.getSeconds();\n      var milliseconds = date.getMilliseconds();\n      var ampm = hours >= 12 ? 'pm' : 'am';\n      hours = hours % 12;\n      hours = hours ? hours : 12; // the hour '0' should be '12'\n\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n      seconds = seconds < 10 ? '0' + seconds : seconds;\n      milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds;\n      var currTime = hours + ':' + minutes + ':' + seconds + ':' + milliseconds + ' ' + ampm;\n      setListOfCityNames(cityNames => cityNames.concat(data.name));\n      setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n      setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n      setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n    }));\n  };\n\n  const handleDelete = index => {\n    setListOfIds(ids => ids.filter(id => ids.indexOf(id) !== index));\n    setListOfCityNames(cityNames => cityNames.filter(city => cityNames.indexOf(city) !== index));\n    setListOfTemperatures(temperatures => temperatures.filter(temperature => temperatures.indexOf(temperature) !== index));\n    setListOfMinTemperatures(minTemperatures => minTemperatures.filter(minTemperature => minTemperatures.indexOf(minTemperature) !== index));\n    setListOfUpdatedAt(updatedAt => updatedAt.filter(date => updatedAt.indexOf(date) !== index));\n  };\n\n  const fetchData = async () => {\n    ids.map(id => fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`).then(response => response.json()).then(data => {\n      var date = new Date();\n      var hours = date.getHours();\n      var minutes = date.getMinutes();\n      var seconds = date.getSeconds();\n      var milliseconds = date.getMilliseconds();\n      var ampm = hours >= 12 ? 'pm' : 'am';\n      hours = hours % 12;\n      hours = hours ? hours : 12; // the hour '0' should be '12'\n\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n      seconds = seconds < 10 ? '0' + seconds : seconds;\n      milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds;\n      var currTime = hours + ':' + minutes + ':' + seconds + ':' + milliseconds + ' ' + ampm;\n      setListOfIds(ids => ids.concat(id));\n      setListOfCityNames(cityNames => cityNames.concat(data.name));\n      setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n      setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n      setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n    }));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.weatherTableContainer,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(SelectionPanel, {\n        children: listOfCityNames.map((city, index) => /*#__PURE__*/_jsxDEV(Chip, {\n          className: classes.selectionChip,\n          label: city,\n          onDelete: () => handleDelete(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WeatherTableHeader, {\n        cityName: \"City Name\",\n        temperature: \"Temperature\",\n        minTemperature: \"Min Temperature\",\n        updatedAt: \"Updated At\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), listOfCityNames.map((city, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(WeatherTableRow, {\n          handleSingleReload: () => handleSingleReload(index),\n          cityName: city,\n          temperature: listOfTemperatures[index],\n          minTemperature: listOfMinTemperatures[index],\n          updatedAt: listOfUpdatedAt[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(ReloadButton, {\n        handleClick: () => handleReload()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherTable, \"vZfFXGu0qNX6BgLlAPe2QOQFI3A=\");\n\n_c = WeatherTable;\n\nconst useStyles = theme => createStyles({\n  weatherTableContainer: {\n    backgroundColor: theme.palette.background.main,\n    backgroundSize: 'cover',\n    width: '100%',\n    height: '100vh',\n    margin: '0px',\n    padding: '0px',\n    overflowX: 'hidden'\n  },\n  selectionChip: {\n    margin: '.5rem',\n    fontFamily: theme.palette.typography.fontFamily,\n    color: theme.palette.text.primary,\n    backgroundColor: theme.palette.secondary.main,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.5rem'\n    }\n  }\n});\n\nexport default withStyles(useStyles)(WeatherTable);\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherTable\");","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/WeatherTable.js"],"names":["React","useEffect","useState","createStyles","withStyles","Box","Container","Divider","Chip","WeatherTableRow","WeatherTableHeader","ReloadButton","SelectionPanel","WeatherTable","props","classes","ids","listOfIds","setListOfIds","listOfCityNames","setListOfCityNames","listOfTemperatures","setListOfTemperatures","listOfMinTemperatures","setListOfMinTemperatures","listOfUpdatedAt","setListOfUpdatedAt","handleSingleReload","index","cityNames","filter","city","indexOf","temperatures","temperature","minTemperatures","minTemperature","updatedAt","date","fetch","process","env","REACT_APP_WEATHER_API_KEY","then","response","json","data","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","ampm","currTime","concat","name","main","temp","temp_min","handleReload","map","id","handleDelete","fetchData","weatherTableContainer","selectionChip","useStyles","theme","backgroundColor","palette","background","backgroundSize","width","height","margin","padding","overflowX","fontFamily","typography","color","text","primary","secondary","breakpoints","down","fontSize"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './WeatherTable.css'\nimport { \n    createStyles, \n    withStyles,\n    Box,\n    Container,\n    Divider,\n    Chip\n} from '@material-ui/core';\nimport WeatherTableRow from '../components/WeatherTableRow';\nimport WeatherTableHeader from '../components/WeatherTableHeader';\nimport ReloadButton from './ReloadButton';\nimport SelectionPanel from './SelectionPanel';\n\nconst WeatherTable = (props) => {\n    const classes = props.classes;\n    const ids = [\n        2172797,\n        1705545,\n        1796228,\n        1006984,\n        1796247\n    ]\n    const [listOfIds, setListOfIds] = useState([]);\n    const [listOfCityNames, setListOfCityNames] = useState([]);\n    const [listOfTemperatures, setListOfTemperatures] = useState([]);\n    const [listOfMinTemperatures, setListOfMinTemperatures] = useState([]);\n    const [listOfUpdatedAt, setListOfUpdatedAt] = useState([]);\n\n    const handleSingleReload = (index) => {\n        setListOfCityNames(cityNames => cityNames.filter(city => cityNames.indexOf(city) !== index));\n        setListOfTemperatures(temperatures => temperatures.filter(temperature => temperatures.indexOf(temperature) !== index));\n        setListOfMinTemperatures(minTemperatures => minTemperatures.filter(minTemperature => minTemperatures.indexOf(minTemperature) !== index));\n        setListOfUpdatedAt(updatedAt => updatedAt.filter(date => updatedAt.indexOf(date) !== index));\n        fetch(`https://api.openweathermap.org/data/2.5/weather?id=${listOfIds[index]}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n            .then((response) => response.json())\n            .then((data) => {\n                var date = new Date();\n                var hours = date.getHours();\n                var minutes = date.getMinutes();\n                var seconds = date.getSeconds();\n                var milliseconds = date.getMilliseconds();\n                var ampm = hours >= 12 ? 'pm' : 'am';\n                hours = hours % 12;\n                hours = hours ? hours : 12; // the hour '0' should be '12'\n                minutes = minutes < 10 ? '0' + minutes : minutes;\n                seconds = seconds < 10 ? '0' + seconds : seconds;\n                milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds;\n                var currTime = hours + ':' + minutes + ':' + seconds + ':' + milliseconds + ' ' + ampm;\n                setListOfCityNames(cityNames => cityNames.concat(data.name));\n                setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n                setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n                setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n            });\n    }\n    const handleReload = () => {\n        setListOfCityNames([]);\n        setListOfTemperatures([]);\n        setListOfMinTemperatures([]);\n        setListOfUpdatedAt([]);\n        listOfIds.map((id) => \n            fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n            .then((response) => response.json())\n            .then((data) => {\n                var date = new Date();\n                var hours = date.getHours();\n                var minutes = date.getMinutes();\n                var seconds = date.getSeconds();\n                var milliseconds = date.getMilliseconds();\n                var ampm = hours >= 12 ? 'pm' : 'am';\n                hours = hours % 12;\n                hours = hours ? hours : 12; // the hour '0' should be '12'\n                minutes = minutes < 10 ? '0' + minutes : minutes;\n                seconds = seconds < 10 ? '0' + seconds : seconds;\n                milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds;\n                var currTime = hours + ':' + minutes + ':' + seconds + ':' + milliseconds + ' ' + ampm;\n                setListOfCityNames(cityNames => cityNames.concat(data.name));\n                setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n                setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n                setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n            })\n        )\n    }\n    const handleDelete = (index) => {\n        setListOfIds(ids => ids.filter(id => ids.indexOf(id) !== index));\n        setListOfCityNames(cityNames => cityNames.filter(city => cityNames.indexOf(city) !== index));\n        setListOfTemperatures(temperatures => temperatures.filter(temperature => temperatures.indexOf(temperature) !== index));\n        setListOfMinTemperatures(minTemperatures => minTemperatures.filter(minTemperature => minTemperatures.indexOf(minTemperature) !== index));\n        setListOfUpdatedAt(updatedAt => updatedAt.filter(date => updatedAt.indexOf(date) !== index));\n    }\n    const fetchData = async () => {\n        ids.map((id) => \n            fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n            .then((response) => response.json())\n            .then((data) => {\n                var date = new Date();\n                var hours = date.getHours();\n                var minutes = date.getMinutes();\n                var seconds = date.getSeconds();\n                var milliseconds = date.getMilliseconds();\n                var ampm = hours >= 12 ? 'pm' : 'am';\n                hours = hours % 12;\n                hours = hours ? hours : 12; // the hour '0' should be '12'\n                minutes = minutes < 10 ? '0' + minutes : minutes;\n                seconds = seconds < 10 ? '0' + seconds : seconds;\n                milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds;\n                var currTime = hours + ':' + minutes + ':' + seconds + ':' + milliseconds + ' ' + ampm;\n                setListOfIds(ids => ids.concat(id));\n                setListOfCityNames(cityNames => cityNames.concat(data.name));\n                setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n                setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n                setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n            })\n        )\n    }\n    useEffect(() => {\n        fetchData();\n    }, []);\n    return (\n        <Box className={classes.weatherTableContainer}>\n            <Container>\n                <SelectionPanel>\n                {listOfCityNames.map((city, index) =>\n                    <Chip\n                    className={classes.selectionChip}\n                    label={city}\n                    onDelete={() => handleDelete(index)}\n                    />\n                )}\n                </SelectionPanel>\n                <WeatherTableHeader\n                   cityName = \"City Name\"\n                   temperature = \"Temperature\"\n                   minTemperature = \"Min Temperature\"\n                   updatedAt =  \"Updated At\"\n                />\n                {listOfCityNames.map((city, index) =>\n                    <div>\n                    <WeatherTableRow\n                    handleSingleReload = {() => handleSingleReload(index)}\n                    cityName = {city}\n                    temperature = {listOfTemperatures[index]}\n                    minTemperature = {listOfMinTemperatures[index]}\n                    updatedAt = {listOfUpdatedAt[index]}\n                    />\n                    <Divider/>\n                </div>\n                )}\n                <ReloadButton handleClick ={() => handleReload()}/>\n            </Container>\n        </Box>\n    );\n}\n\nconst useStyles = (theme) => createStyles({\n    weatherTableContainer: {\n        backgroundColor: theme.palette.background.main,\n        backgroundSize: 'cover',\n        width: '100%',\n        height: '100vh',\n        margin: '0px',\n        padding: '0px',\n        overflowX: 'hidden',\n    },\n    selectionChip: {\n        margin: '.5rem',\n        fontFamily: theme.palette.typography.fontFamily,\n        color: theme.palette.text.primary,\n        backgroundColor: theme.palette.secondary.main,\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '.5rem',\n        },\n    }\n});\n\nexport default withStyles(useStyles)(WeatherTable);"]},"metadata":{},"sourceType":"module"}