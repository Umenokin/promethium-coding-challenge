[{"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/index.js":"1","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/reportWebVitals.js":"2","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/ScrollToTop.js":"3","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/Theme.js":"4","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/Main.js":"5","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/WeatherTable.js":"6","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/components/WeatherTableRow.js":"7","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/components/WeatherTableHeader.js":"8","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/components/WeatherTableItem.js":"9","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/ReloadButton.js":"10","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/SelectionPanel.js":"11"},{"size":911,"mtime":1612688380366,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1612637590557,"results":"14","hashOfConfig":"13"},{"size":250,"mtime":1612641874485,"results":"15","hashOfConfig":"13"},{"size":494,"mtime":1612686004096,"results":"16","hashOfConfig":"13"},{"size":285,"mtime":1612685877941,"results":"17","hashOfConfig":"13"},{"size":4650,"mtime":1612754793199,"results":"18","hashOfConfig":"13"},{"size":1084,"mtime":1612685461800,"results":"19","hashOfConfig":"13"},{"size":997,"mtime":1612685360100,"results":"20","hashOfConfig":"13"},{"size":705,"mtime":1612684021620,"results":"21","hashOfConfig":"13"},{"size":763,"mtime":1612685422739,"results":"22","hashOfConfig":"13"},{"size":580,"mtime":1612687169948,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"gq53j",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/index.js",[],["49","50"],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/reportWebVitals.js",[],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/ScrollToTop.js",[],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/Theme.js",[],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/Main.js",[],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/WeatherTable.js",["51"],"import React, {useEffect, useState} from 'react';\nimport './WeatherTable.css'\nimport { \n    createStyles, \n    withStyles,\n    Box,\n    Container,\n    Divider,\n    Chip\n} from '@material-ui/core';\nimport WeatherTableRow from '../components/WeatherTableRow';\nimport WeatherTableHeader from '../components/WeatherTableHeader';\nimport ReloadButton from './ReloadButton';\nimport SelectionPanel from './SelectionPanel';\n\nconst WeatherTable = (props) => {\n    const classes = props.classes;\n    const ids = [\n        2172797,\n        1705545,\n        1796228,\n        1006984,\n        1796247\n    ]\n    const [listOfCityNames, setListOfCityNames] = useState([]);\n    const [listOfTemperatures, setListOfTemperatures] = useState([]);\n    const [listOfMinTemperatures, setListOfMinTemperatures] = useState([]);\n    const [listOfUpdatedAt, setListOfUpdatedAt] = useState([]);\n\n    const handleDelete = (index) => {\n        setListOfCityNames(cityNames => cityNames.filter(city => cityNames.indexOf(city) !== index));\n        setListOfTemperatures(temperatures => temperatures.filter(temperature => temperatures.indexOf(temperature) !== index));\n        setListOfMinTemperatures(minTemperatures => minTemperatures.filter(minTemperature => minTemperatures.indexOf(minTemperature) !== index));\n        setListOfUpdatedAt(updatedAt => updatedAt.filter(date => updatedAt.indexOf(date) !== index));\n    }\n    const fetchData = async () => {\n        ids.map((id) => \n            fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n            .then((response) => response.json())\n            .then((data) => {\n                var date = new Date();\n                var hours = date.getHours();\n                var minutes = date.getMinutes();\n                var seconds = date.getSeconds();\n                var milliseconds = date.getMilliseconds();\n                var ampm = hours >= 12 ? 'pm' : 'am';\n                hours = hours % 12;\n                hours = hours ? hours : 12; // the hour '0' should be '12'\n                minutes = minutes < 10 ? '0' + minutes : minutes;\n                seconds = seconds < 10 ? '0' + seconds : seconds;\n                milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds;\n                var currTime = hours + ':' + minutes + ':' + seconds + ':' + milliseconds + ' ' + ampm;\n                setListOfCityNames(cityNames => cityNames.concat(data.name));\n                setListOfTemperatures(temperatures => temperatures.concat(data.main.temp));\n                setListOfMinTemperatures(minTemperatures => minTemperatures.concat(data.main.temp_min));\n                setListOfUpdatedAt(updatedAt => updatedAt.concat(currTime));\n            })\n        )\n    }\n    useEffect(() => {\n        fetchData();\n    }, []);\n    return (\n        <Box className={classes.weatherTableContainer}>\n            <Container>\n                <SelectionPanel>\n                {listOfCityNames.map((city, index) =>\n                    <Chip\n                    className={classes.selectionChip}\n                    label={city}\n                    onDelete={() => handleDelete(index)}\n                    />\n                )}\n                </SelectionPanel>\n                <WeatherTableHeader\n                   cityName = \"City Name\"\n                   temperature = \"Temperature\"\n                   minTemperature = \"Min Temperature\"\n                   updatedAt =  \"Updated At\"\n                />\n                {listOfCityNames.map((city, index) =>\n                    <div>\n                    <WeatherTableRow\n                    cityName = {city}\n                    temperature = {listOfTemperatures[index]}\n                    minTemperature = {listOfMinTemperatures[index]}\n                    updatedAt = {listOfUpdatedAt[index]}\n                    />\n                    <Divider/>\n                </div>\n                )}\n                <ReloadButton/>\n            </Container>\n        </Box>\n    );\n}\n\nconst useStyles = (theme) => createStyles({\n    weatherTableContainer: {\n        backgroundColor: theme.palette.background.main,\n        backgroundSize: 'cover',\n        width: '100%',\n        height: '100vh',\n        margin: '0px',\n        padding: '0px',\n        overflowX: 'hidden',\n    },\n    selectionChip: {\n        margin: '.5rem',\n        fontFamily: theme.palette.typography.fontFamily,\n        color: theme.palette.text.primary,\n        backgroundColor: theme.palette.secondary.main,\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '.5rem',\n        },\n    }\n});\n\nexport default withStyles(useStyles)(WeatherTable);","/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/components/WeatherTableRow.js",[],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/components/WeatherTableHeader.js",[],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/components/WeatherTableItem.js",[],["52","53"],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/ReloadButton.js",[],"/Users/nathanaelshim/Desktop/promethium-coding-challenge/src/main/SelectionPanel.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":62,"column":8,"nodeType":"60","endLine":62,"endColumn":10,"suggestions":"61"},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["66"],["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [fetchData]",{"range":"69","text":"70"},[2816,2818],"[fetchData]"]